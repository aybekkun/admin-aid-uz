/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutDashboardImport } from './routes/_layout/dashboard'
import { Route as LayoutNewsIndexImport } from './routes/_layout/news/index'
import { Route as LayoutNewsListImport } from './routes/_layout/news/list'
import { Route as LayoutNewsCreateImport } from './routes/_layout/news/create'
import { Route as LayoutNewsIdIndexImport } from './routes/_layout/news/$id/index'
import { Route as LayoutNewsIdEditImport } from './routes/_layout/news/$id/edit'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutDashboardRoute = LayoutDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNewsIndexRoute = LayoutNewsIndexImport.update({
  id: '/news/',
  path: '/news/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNewsListRoute = LayoutNewsListImport.update({
  id: '/news/list',
  path: '/news/list',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNewsCreateRoute = LayoutNewsCreateImport.update({
  id: '/news/create',
  path: '/news/create',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNewsIdIndexRoute = LayoutNewsIdIndexImport.update({
  id: '/news/$id/',
  path: '/news/$id/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNewsIdEditRoute = LayoutNewsIdEditImport.update({
  id: '/news/$id/edit',
  path: '/news/$id/edit',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_layout/dashboard': {
      id: '/_layout/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof LayoutDashboardImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/news/create': {
      id: '/_layout/news/create'
      path: '/news/create'
      fullPath: '/news/create'
      preLoaderRoute: typeof LayoutNewsCreateImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/news/list': {
      id: '/_layout/news/list'
      path: '/news/list'
      fullPath: '/news/list'
      preLoaderRoute: typeof LayoutNewsListImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/news/': {
      id: '/_layout/news/'
      path: '/news'
      fullPath: '/news'
      preLoaderRoute: typeof LayoutNewsIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/news/$id/edit': {
      id: '/_layout/news/$id/edit'
      path: '/news/$id/edit'
      fullPath: '/news/$id/edit'
      preLoaderRoute: typeof LayoutNewsIdEditImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/news/$id/': {
      id: '/_layout/news/$id/'
      path: '/news/$id'
      fullPath: '/news/$id'
      preLoaderRoute: typeof LayoutNewsIdIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutDashboardRoute: typeof LayoutDashboardRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutNewsCreateRoute: typeof LayoutNewsCreateRoute
  LayoutNewsListRoute: typeof LayoutNewsListRoute
  LayoutNewsIndexRoute: typeof LayoutNewsIndexRoute
  LayoutNewsIdEditRoute: typeof LayoutNewsIdEditRoute
  LayoutNewsIdIndexRoute: typeof LayoutNewsIdIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutDashboardRoute: LayoutDashboardRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutNewsCreateRoute: LayoutNewsCreateRoute,
  LayoutNewsListRoute: LayoutNewsListRoute,
  LayoutNewsIndexRoute: LayoutNewsIndexRoute,
  LayoutNewsIdEditRoute: LayoutNewsIdEditRoute,
  LayoutNewsIdIndexRoute: LayoutNewsIdIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/': typeof LayoutIndexRoute
  '/news/create': typeof LayoutNewsCreateRoute
  '/news/list': typeof LayoutNewsListRoute
  '/news': typeof LayoutNewsIndexRoute
  '/news/$id/edit': typeof LayoutNewsIdEditRoute
  '/news/$id': typeof LayoutNewsIdIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/dashboard': typeof LayoutDashboardRoute
  '/': typeof LayoutIndexRoute
  '/news/create': typeof LayoutNewsCreateRoute
  '/news/list': typeof LayoutNewsListRoute
  '/news': typeof LayoutNewsIndexRoute
  '/news/$id/edit': typeof LayoutNewsIdEditRoute
  '/news/$id': typeof LayoutNewsIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/dashboard': typeof LayoutDashboardRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/news/create': typeof LayoutNewsCreateRoute
  '/_layout/news/list': typeof LayoutNewsListRoute
  '/_layout/news/': typeof LayoutNewsIndexRoute
  '/_layout/news/$id/edit': typeof LayoutNewsIdEditRoute
  '/_layout/news/$id/': typeof LayoutNewsIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/dashboard'
    | '/'
    | '/news/create'
    | '/news/list'
    | '/news'
    | '/news/$id/edit'
    | '/news/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/dashboard'
    | '/'
    | '/news/create'
    | '/news/list'
    | '/news'
    | '/news/$id/edit'
    | '/news/$id'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/_layout/dashboard'
    | '/_layout/'
    | '/_layout/news/create'
    | '/_layout/news/list'
    | '/_layout/news/'
    | '/_layout/news/$id/edit'
    | '/_layout/news/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/login"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/dashboard",
        "/_layout/",
        "/_layout/news/create",
        "/_layout/news/list",
        "/_layout/news/",
        "/_layout/news/$id/edit",
        "/_layout/news/$id/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_layout/dashboard": {
      "filePath": "_layout/dashboard.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/news/create": {
      "filePath": "_layout/news/create.tsx",
      "parent": "/_layout"
    },
    "/_layout/news/list": {
      "filePath": "_layout/news/list.tsx",
      "parent": "/_layout"
    },
    "/_layout/news/": {
      "filePath": "_layout/news/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/news/$id/edit": {
      "filePath": "_layout/news/$id/edit.tsx",
      "parent": "/_layout"
    },
    "/_layout/news/$id/": {
      "filePath": "_layout/news/$id/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
